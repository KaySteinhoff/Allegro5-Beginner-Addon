Source.Start()

This Function is contained in the Source header with is run when building the .exe.
It is run only once at the Start of the Application. This used to initalize things like bitmaps or animations.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Source.Update()

This Function is contained in the Source header with is run when building the .exe.
It is run every frame it is used to create dynamic elements like enemys or the player.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon.Distance(float x1, float y1, float x2, float y2)

This function calculated the distance between two points.
It takes in four floats for x and y form the points from whom to get the distance from.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Animation

Takes in an Spritesheet as well as the number of sprites on it.
Right now all the sprites need to be in one line from left to right.
In version 1.1 multiline spritesheets will be supported.

  -Addon::Animation.Show(int flag)
  This function takes in an integer as a flag.
  ALLEGRO_FLIP_HORIZONTAL => Flips the animation around the Y-axis
  ALLEGRO_FLIP_VERTICAL   => Flips the animation around the X-axis
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Event

Pre version of an animator.

Takes in two Animations as well as an boolean.

Bool false  => Playing the first Animation.
Bool true   => Playing the second Animation.

The boolean should be an reference boolean (decleared like so: bool& someBool = Addon::Event.condition;)

  -Addon::Event.Run()
  Checks for the condition and shows the needed one.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::ScanForMouse()

This function reads the mouse Position as well as the left, right and middle mouse buttons for being pressed and being hold.
These new inputs are accessable through the input call key[KS_AL_ADDON_x] (x => change to KEY_ with the key to read in caps)
in this case it is KS_AL_ADDON_MOUSE_X_DOWN or KS_AL_ADDON_MOUSE_X_PRESSED.

Input names:
KS_AL_ADDON_KEY_A =             check for A
KS_AL_ADDON_KEY_B =             check for B
KS_AL_ADDON_KEY_C =             check for C
KS_AL_ADDON_KEY_D =             check for D
KS_AL_ADDON_KEY_E =             check for E
KS_AL_ADDON_KEY_F =             check for F
KS_AL_ADDON_KEY_G =             check for G
KS_AL_ADDON_KEY_H =             check for H
KS_AL_ADDON_KEY_I =             check for I
KS_AL_ADDON_KEY_J =             check for J
KS_AL_ADDON_KEY_K =             check for K
KS_AL_ADDON_KEY_L =             check for L
KS_AL_ADDON_KEY_M =             check for M
KS_AL_ADDON_KEY_N =             check for N
KS_AL_ADDON_KEY_O =             check for O
KS_AL_ADDON_KEY_P =             check for P
KS_AL_ADDON_KEY_Q =             check for Q
KS_AL_ADDON_KEY_R =             check for R
KS_AL_ADDON_KEY_S =             check for S
KS_AL_ADDON_KEY_T =             check for T
KS_AL_ADDON_KEY_U =             check for U
KS_AL_ADDON_KEY_V =             check for V
KS_AL_ADDON_KEY_W =             check for W
KS_AL_ADDON_KEY_X =             check for X
KS_AL_ADDON_KEY_Y =             check for Y
KS_AL_ADDON_KEY_Z =             check for Z
KS_AL_ADDON_KEY_DOWN =          check if any key is down
KS_AL_ADDON_KEY_UP =            check if all keys are up
KS_AL_ADDON_MOUSE_L_DOWN =      check if left mouse is hold down
KS_AL_ADDON_MOUSE_R_DOWN =      check if right mouse is hold down
KS_AL_ADDON_MOUSE_M_DOWN =      check if middle mouse is hold down
KS_AL_ADDON_MOUSE_L_PRESSED =   check if left mouse was pressed
KS_AL_ADDON_MOUSE_R_PRESSED =   check if right mouse was pressed
KS_AL_ADDON_MOUSE_M_PRESSED =   check if middle mouse was pressed
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Text
Contains three integers for x position(dx) y position(dy) and the font size(fontsize) as well as a const char* fontFilepath to a custom .ttf file with a font.
Content is later displayed using Show(). color[3] is used to store the RGB values in wihch the font will be drawn(from 0 to 255).

To use it first call LoadFont() to load the default font or the custom one if the file path is given. Then call Show() to display the content.

Exsample:

class Source
{
  Text example;
  void Start(){
    example.dx = 0;
    example.dy = 0;
    example.fontsize = 18;
    example.content = "This is an example!";
    example.LoadFont();
  }
  
  void Update(){
    example.Show();
  }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Button
This class contains five variables dx the x position, dy the y position, wx the width in x direction(width), wy the width in y direction(height) and bg_img the background image.

To use it first call Preload(int dx, int dy, int wx, int wy, ALLEGRO_BITMAP* bg_img) and fill all variables. Then call Show() to display the button.
The Button can be checked for being pressed by using the function ButtonPressed() which returns a boolean.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Inputfield(only Experimental)
This class contains one variable text which contains the text input.

To use this class first call Preload(int dx, int dy, int wx, int wy, int fontSize, int color[3], int flag, ALLEGRO_BITMAP* img, const char* fontFilepath) and fill all variables. Then call Run() to display and use the Inputfield.

Example:

class Source
{
  Inputfield field;
  
  void Start(){
    field.Preload(0,                    //X position
                  0,                    //Y position
                  150,                  //Width in x direction(width)
                  25,                   //Width in y direction(height)
                  16,                   //Font size
                  int col[3] = { 0 },   //Color to draw text with
                  NULL,                 //Flags
                  NULL,                 //Background image
                  NULL)                 //File path to a custom font (.ttf)
  }
};
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Checkbox
THis class contains six variables dx the x position, dy the y position, wx the width in x direction(width), wy the width in y direction(height), flag for flaging the checkbox with specific behaviours and active for the current state.

To use it first call Preload(int dx, int dy, int wx, int wy, int flag, ALLEGRO_BITMAP* bg_img, ALLEGRO_BITMAP* checkmark) and fill in all the variables. Then call Run() to display it.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Addon::Slider
This class contains six variables used to check if it currently is used, value to get the handle position on the slider(from 0 to 1), x position, dy the y position, wx the width in x direction(width) and wy the width in y direction(height).

To use it first call Preload(int dx, int dy, int wx, int wy, float startingValue, ALLEGRO_BITMAP* handle) and fill in all the variables. Then call Run() to display and use it.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Matrix
This class is building the world space for the 3d model that will be displayed.

To use this call the Matrix::setup_3D() function which will create and cache the world space. Then call UpadteMatrix(float fElapsedTime, Mesh mesh) to update to Matrix which will rotate the given 3d model. The default window Redraw time is 0.03 sec so this is the currently best option as fElapsedTime.
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Mesh
This struct contains a vector of triangles to build the 3d model.

To use this call LoadFromObjectFile(string sFilename) and enter the path to the 3d model (.obj files only).
